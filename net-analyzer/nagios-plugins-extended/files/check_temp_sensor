#!/bin/bash
#
# check_temp_sensor
#
# Temperature check plugin for Nagios
#
# Copyright (c) 2008-2010 Sascha Bendix (scrubb@localroot.de)
# Copyright (c) 2010-2013 Marcel Pennewiss (opensource@pennewiss.de)
# Copyright (c) 2011      Markus Filzhuth (markus@filzhuth.de) 
# Forschungsgemeinschaft elektronische Medien e.V. (FeM e.V.)
#
# Current Version: 0.6
# Last Modified: 2013-07-10
#
# USAGE:
#   Start check_temp_sensors wit the "-h" option to show usage/help.
#
# REQUIREMENTS:
#   netcat
#   bash-3.2 (regex operator)
#   bc
#
# INSTALLATION: 
#   Copy the shell script to a suitable location
#
# CHANGELOG:
#   v0.1   - Initial Release
#   v0.2   - Add hysteresis options (2011-07-14)
#   v0.2.1 - Fix hysteresis option for last state "unknown" (2011-07-17)
#   v0.3   - Add option to use unix timestamp in sensor information (2011-07-22)
#   v0.4   - Add performance data output (2011-07-23)
#   v0.5   - Add autodetection for multiple timeformats, remove command-line parameter for unix timestamp (2011-08-17)
#   v0.6   - Allow local file as source and do not use stdin from netcat (2013-07-10)
#
# SUPPORTED SENSOR INFORMATION FORMATS:
#   I)   [SENSORNUMBER] YYYY-MM-DD HH:MM [TEMPERATURE] (e.g. 2011-08-17 21:40 30.19)
#   II)  [SENSORNUMBER] UNIX-TIMESTAMP [TEMPERATURE] (e.g. 0 1313610005 30.19)
#   III) [SENSORNUMBER] YYYY-MM-DD HH:MM TIMEZONE(alphabetical) [TEMPERATURE] (e.g. 0 2011-08-17 19:40 UTC 30.12)
#
# TODO:
#   verbose output (nagios plugin guide 2.2)
#   verbose help (nagios plugin guide 2.3)
#   critical/warn param; -c10: -w14: -c:34 -w:30? 
#   translations (nagios plugin guide 2.7)
#
# LICENSE: GPL-2
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
##########################################################################

# default values
TEMP_LOW_WARNING=10
TEMP_LOW_NORMAL=14
TEMP_HIGH_NORMAL=30
TEMP_HIGH_WARNING=34
REMOTE_PORT=8469
MAXIMAL_SENSOR_AGE=15
SENSOR_NUMBER=0
REMOTE_TIMEOUT=5
TEMP_HYSTERESE=2

NAGIOS_OK=0
NAGIOS_WARNING=1
NAGIOS_CRITICAL=2
NAGIOS_UNKNOWN=3

# show usage information
print_usage() {
  SCRIPT_NAME=$(basename ${0})
  echo "CHECK_TEMP_SENSOR (v0.4)"
  echo "Temperature check plugin for Nagios"
  echo ""
  echo "Usage ${SCRIPT_NAME} -H <host> [-p <port] [-l <low_warn>,<low_normal>,<high_normal>,<high_warn>]"
  echo "      ${SCRIPT_NAME//[a-zA-Z0-9\-\_]/ } [-m <max_age>] [-s <sensor_nr>] [-T <timeout>] [-t <tolerance> -n <status>] [-h] [-V]"
  echo ""
  echo " -H <host>        Remote host"
  echo " -p <port>        Port to connect to on the remote host (default: ${REMOTE_PORT})"
  echo " -l               Temperature thresholds"
  echo "    <low_warn>      Lower bound of warning temperature (default: ${TEMP_LOW_WARNING})"
  echo "    <low_normal>    Lower bound of normal temperature (default: ${TEMP_LOW_NORMAL})"
  echo "    <high_normal>   Upper bound of normal temperature (default: ${TEMP_HIGH_NORMAL})"
  echo "    <high_warn>     Upper bound of warning temperature (default: ${TEMP_HIGH_WARNING})"
  echo " -m <max_age>     Maximal age of sensor data in minutes (default: ${MAXIMAL_SENSOR_AGE})"
  echo " -s <sensor_nr>   Sensor number (if multiple sensors exists)"
  echo " -T <timeout>     Timeout for connection (default: ${REMOTE_TIMEOUT})"
  echo " -t <tolerance>   Tolerance in Kelvin to achieve hysteresis"
  echo " -n <status>      Last State of service (needed to use hysteresis)"
  echo " -h               Show this help"
  echo ""
}

# apply hysteresis values
apply_hysteresis_value() {
  case ${LAST_SERVICE_STATUS} in
    ${NAGIOS_OK})       TEMP_LOW_NORMAL=$((TEMP_LOW_NORMAL-TEMP_HYSTERESIS))
                        TEMP_HIGH_NORMAL=$((TEMP_HIGH_NORMAL+TEMP_HYSTERESIS))
                        TEMP_LOW_WARNING=$((TEMP_LOW_WARNING-TEMP_HYSTERESIS))
                        TEMP_HIGH_WARNING=$((TEMP_HIGH_WARNING+TEMP_HYSTERESIS))
		        ;;
    ${NAGIOS_WARNING})  TEMP_LOW_NORMAL=$((TEMP_LOW_NORMAL+TEMP_HYSTERESIS))
                        TEMP_HIGH_NORMAL=$((TEMP_HIGH_NORMAL-TEMP_HYSTERESIS))
                        TEMP_LOW_WARNING=$((TEMP_LOW_WARNING-TEMP_HYSTERESIS))
                        TEMP_HIGH_WARNING=$((TEMP_HIGH_WARNING+TEMP_HYSTERESIS))
		        ;;
    ${NAGIOS_CRITICAL}) TEMP_LOW_NORMAL=$((TEMP_LOW_NORMAL+TEMP_HYSTERESIS))
                        TEMP_HIGH_NORMAL=$((TEMP_HIGH_NORMAL-TEMP_HYSTERESIS))
                        TEMP_LOW_WARNING=$((TEMP_LOW_WARNING+TEMP_HYSTERESIS))
                        TEMP_HIGH_WARNING=$((TEMP_HIGH_WARNING-TEMP_HYSTERESIS))
		        ;;
    ${NAGIOS_UNKNOWN}) ;;
    *) echo "TEMP UNKNOWN - Unknown Last service status. That was not supposed to happen."
       exit ${NAGIOS_UNKNOWN}
       ;;
  esac
}

# print performance data
echoperfdata () {
  echo -n " | 'temp'=$TEMPERATURE;$TEMP_LOW_NORMAL:$TEMP_HIGH_NORMAL;$TEMP_LOW_WARNING:$TEMP_HIGH_WARNING"
  echo -n " 'temp_low_norm'=$TEMP_LOW_NORMAL"
  echo -n " 'temp_high_norm'=$TEMP_HIGH_NORMAL"
  echo -n " 'temp_low_warn'=$TEMP_LOW_WARNING"
  echo -n " 'temp_high_warn'=$TEMP_HIGH_WARNING"
  echo
}

# get data via network
getdata() {

  # check source specification
  if [ "x${LOCAL_FILE}" = "x" ] && [ "x${REMOTE_HOST}" = "x" ]; then
    echo "TEMP UNKNOWN - Neither local file nor remote host specified as source."
    exit ${NAGIOS_UNKNOWN}
  fi

  if [ "x${LOCAL_FILE}" != "x" ] && [ "x${REMOTE_HOST}" != "x" ]; then
    echo "TEMP UNKNOWN - Local file and remote host specified as source."
    exit ${NAGIOS_UNKNOWN}
  fi

  # try to get sensor output
  if [[ -n ${LOCAL_FILE} ]]; then

    if [ ! -f ${LOCAL_FILE} ]; then
      echo "TEMP UNKNOWN - Local file ${LOCAL_FILE} not found."
      exit ${NAGIOS_UNKNOWN}
    fi

    RETURN_VALUE=$(cat ${LOCAL_FILE})

  elif [ -n ${REMOTE_HOST} ]; then

    # try to connect to temperature service
    RETURN_VALUE=$(nc -w ${REMOTE_TIMEOUT} ${REMOTE_HOST} ${REMOTE_PORT} 2>&1 < /dev/null)

    # Connection succesfull?
    if [ $? -ne 0 ]; then
      echo "TEMP CRITICAL - Network connection failed: ${RETURN_VALUE}"
      exit ${NAGIOS_CRITICAL}
    fi
  fi

  RETURN_VALUE=$(echo "${RETURN_VALUE}" | egrep "^${SENSOR_NUMBER}\ .*$" | head -n 1)

  # Sensor not found?
  if [ "x${RETURN_VALUE}" = "x" ]; then
    echo "TEMP CRITICAL - Sensor ${SENSOR_NUMBER} not found!"
    exit ${NAGIOS_CRITICAL}
  fi

  # Check possible return value formats
  local WRONG_INPUT_FORMAT=true
  if [[ ${RETURN_VALUE} =~ ^[0-9]{1,2}\ [1-9][0-9]*\ [0-9]{1,2}\.[0-9]{1,2}$ ]]; then
    local WRONG_INPUT_FORMAT=false
    INPUT_FORMAT='timestamp'
  elif [[ ${RETURN_VALUE} =~ ^[0-9]{1,2}\ 2[0-9]{3}\-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[0-1])\ ([01][0-9]|2[0-3])\:([0-5][0-9])\ [0-9]{1,2}\.[0-9]{1,2}$ ]]; then
    local WRONG_INPUT_FORMAT=false
    INPUT_FORMAT='datetime'
  elif [[ ${RETURN_VALUE} =~ ^[0-9]{1,2}\ 2[0-9]{3}\-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[0-1])\ ([01][0-9]|2[0-3])\:([0-5][0-9])\ [A-Z]{1,5}\ [0-9]{1,2}\.[0-9]{1,2}$ ]]; then
    local WRONG_INPUT_FORMAT=false
    INPUT_FORMAT='datetime_with_timezone'
  fi

  if ${WRONG_INPUT_FORMAT:=false}; then
    echo "TEMP CRITICAL - Wrong input format from remote host!"
    exit ${NAGIOS_CRITICAL}
  fi
}

# check freshness 
check_freshness() {
  # Seperate params in array
  local RETURN_VALUE=($(echo $RETURN_VALUE))

  case ${INPUT_FORMAT} in
    timestamp ) # format with unix timestamp
	        local SECONDS_SENSOR=${RETURN_VALUE[1]}
                local OUTPUT_DATETIME_VALUE=$(date --date "1970-01-01 ${RETURN_VALUE[1]} sec UTC" +"%F %H:%M")
	        ;;
    datetime ) # format with YYYY-MM-DD hh:mm to timestamp
               local SECONDS_SENSOR=$(date --date "${RETURN_VALUE[1]} ${RETURN_VALUE[2]}" +%s)
               local OUTPUT_DATETIME_VALUE="${RETURN_VALUE[1]} ${RETURN_VALUE[2]}"
 	       ;;
    datetime_with_timezone ) # format with YYYY-MM-DD hh:mm TZ to timestamp
                             local SECONDS_SENSOR=$(date --date "${RETURN_VALUE[1]} ${RETURN_VALUE[2]} ${RETURN_VALUE[3]}" +%s)
                             local OUTPUT_DATETIME_VALUE=$(date --date "${RETURN_VALUE[1]} ${RETURN_VALUE[2]} ${RETURN_VALUE[3]}" +"%F %H:%M")
                             ;;
  esac

  local SECONDS_NOW=`date +%s`
  local SECONDS_XMIN_AGO=`date --date=-${MAXIMAL_SENSOR_AGE}min +%s`
  if [ $SECONDS_SENSOR -gt $SECONDS_NOW ] || [ $SECONDS_SENSOR -lt $SECONDS_XMIN_AGO ]; then
    echo "TEMP WARNING - Temperature is dated from ${OUTPUT_DATETIME_VALUE} and not fresh!"
    exit ${NAGIOS_WARNING}
  fi
}

# validate data
validate() {
  # apply hysteresis values if necessary 
  if [[ -n ${TEMP_HYSTERESIS} && -n ${LAST_SERVICE_STATUS} ]]; then
    apply_hysteresis_value
  fi

  # Check freshness of sensor data
  check_freshness

  # Seperate params in array
  local RETURN_VALUE=($(echo $RETURN_VALUE))

  case ${INPUT_FORMAT} in
    timestamp ) # format with unix timestamp
                local TEMPERATURE=${RETURN_VALUE[2]}
	        ;;
    datetime ) # format with YYYY-MM-DD hh:mm to timestamp
               local TEMPERATURE=${RETURN_VALUE[3]}
 	       ;;
    datetime_with_timezone ) # format with YYYY-MM-DD hh:mm TZ to timestamp
                             local TEMPERATURE=${RETURN_VALUE[4]}
                             ;;
  esac

  # Compare with critical threshold
  if [ $(echo "${TEMPERATURE} > ${TEMP_HIGH_WARNING}" | bc) -eq 1 ] || [ $(echo "${TEMPERATURE} < ${TEMP_LOW_WARNING}" | bc) -eq 1 ]; then
    echo -n "TEMP CRITICAL - Temperature ${TEMPERATURE} is out of warnings bounds!"
    echoperfdata
    exit ${NAGIOS_CRITICAL}
  # Compare with normal threshold
  elif [ $(echo "${TEMPERATURE} > ${TEMP_HIGH_NORMAL}" | bc) -eq 1 ] || [ $(echo "${TEMPERATURE} < ${TEMP_LOW_NORMAL}" | bc) -eq 1 ]; then
    echo -n "TEMP WARNING - Temperature ${TEMPERATURE} is out of normal bounds!"
    echoperfdata
    exit ${NAGIOS_WARNING}
  fi

  # return OK with temperature
  echo -n "TEMP OK - $TEMPERATURE °C"
  echoperfdata
  exit 0
}

# run main part
if [ $# -lt 2 ] || [[ $1 =~ ^x[^-].*$ ]] && [[ "x$1" != "x-V" ]]; then
  print_usage && exit ${NAGIOS_UNKNOWN}
fi

# overwrite remote host variable (otherwise environment variable is used)
REMOTE_HOST=
while getopts ":L:H:p:l:m:s:T:t:n:h" Option; do
  case ${Option} in
    L ) LOCAL_FILE=${OPTARG} ;;
    H ) REMOTE_HOST=${OPTARG} ;;
    p ) REMOTE_PORT=${OPTARG} ;;
    l ) # check valid temperatures
        if ! [[ ${OPTARG} =~ ^([0-9]{1,2},){3}[0-9]{1,2}$ ]]; then 
          echo "TEMP UNKNOWN - Specified temperatures not valid - please enter only values from 0 to 99"
          exit ${NAGIOS_UNKNOWN}
        fi
        # split variable into array
        TEMPERATURES=($(echo $OPTARG | tr ',' ' '))
	TEMP_LOW_WARNING=${TEMPERATURES[0]}
	TEMP_LOW_NORMAL=${TEMPERATURES[1]}
	TEMP_HIGH_NORMAL=${TEMPERATURES[2]}
	TEMP_HIGH_WARNING=${TEMPERATURES[3]}
        if [[ ${TEMP_LOW_WARNING} -ge ${TEMP_LOW_NORMAL} ]] || [[ ${TEMP_LOW_NORMAL} -gt ${TEMP_HIGH_NORMAL} ]] || [[ ${TEMP_HIGH_NORMAL} -ge ${TEMP_HIGH_WARNING} ]]; then
          echo "TEMP WARNING - Specified temperatures are not in right order - please validate!"
	  exit ${NAGIOS_CRITICAL}
	fi
	;;
    m ) MAXIMAL_SENSOR_AGE=${OPTARG} ;;
    s ) # check valid sensor number
        if ! [[ ${OPTARG} =~ ^[0-9]{1,2}$ ]]; then
	  echo "TEMP UNKNOWN - Sensor numbers are only allowed from 0 to 99"
	  exit ${NAGIOS_UNKNOWN}
	fi
	SENSOR_NUMBER=${OPTARG} ;;
    T ) REMOTE_TIMEOUT=${OPTARG} ;;
    t ) # check valid hysteresis value
        if ! [[ ${OPTARG} =~ ^[0-9]{1,2}$ ]]; then
          echo "TEMP UNKNOWN - Hysteresis values are only allowed from 0 to 99"
	  exit ${NAGIOS_UNKNOWN}
	fi
	TEMP_HYSTERESIS=${OPTARG} ;;
    n ) # check valid last service status
        if ! [[ ${OPTARG} =~ ^[0-3]$ ]]; then
	  echo "TEMP UNKNOWN - Last service status have to be between 0 and 3"
	  exit ${NAGIOS_UNKNOWN}
	fi
	LAST_SERVICE_STATUS=${OPTARG} ;;
    h ) print_usage && exit 0 ;;
    * ) echo "TEMP UNKNOWN - Unknown parameter"
        exit ${NAGIOS_UNKNOWN} ;;
  esac
done
shift $(($OPTIND - 1)) 

# sanity check
if [[ -n ${TEMP_HYSTERESIS} && -z ${LAST_SERVICE_STATUS} ]] || [[ -z ${TEMP_HYSTERESIS} && -n ${LAST_SERVICE_STATUS} ]]; then
  echo "TEMP UNKNOWN - Either hysteresis value or Last Service Status given, both parameters are needed for hysteresis behavior."
  exit ${NAGIOS_UNKNOWN}
fi

getdata
validate

exit 0
