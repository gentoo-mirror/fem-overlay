#!/usr/bin/perl
#
# check_corosync_rings
#
# Copyright Â© 2011 Phil Garner, Sysnix Consultants Limited
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Authors: Phil Garner - phil@sysnix.com & Peter Mottram peter@sysnix.com
#
# v0.1 05/01/2011 
#
# NOTE:- Requires Perl 5.8 or higher & the Perl Module Monitoring::Plugin 
#        Nagios user will need sudo acces - suggest adding line below to 
#        sudoers.
#        nagios  ALL=(ALL) NOPASSWD: /usr/sbin/corosync-cfgtool -s
#

use warnings;
use strict;
use Monitoring::Plugin;

our $np = Monitoring::Plugin->new(
    shortname => 'check_cororings',
    version   => '0.1',
    usage     => "Usage: %s <ARGS>\n\t\t--help for help\n",
);

$np->add_arg(
    spec     => 'rings|r=s',
    help     => 'How many rings should be running',
    required => 0,
);

$np->getopts;

our $found = 0;
our $fh;
our $rings = $np->opts->rings;

# Line below may need changing if corosync-cfgtool or sudo installed in a 
# diffrent location.

open($fh, "/usr/bin/sudo /usr/sbin/corosync-cfgtool -s|")
    or $np->nagios_exit( CRITICAL, "Running corosync-cfgtool failed" );

foreach my $line (<$fh>) {
    if ( $line =~ m/status\s*=\s*(\S.+)/ ) {
        my $status = $1;
        if ( $status =~ m/^ring (\d+) active with no faults/ ) {
            $np->add_message( OK, "ring $1 OK" );
        }
        else {
            $np->add_message( CRITICAL, $status );
        }
        $found++;
    }
}

close($fh);

if ( $found == 0 ) {
    $np->nagios_exit( CRITICAL, "No Rings Found" );
} elsif ( defined $rings && $rings != $found ) {
    $np->nagios_exit( CRITICAL, "Expected $rings rings but found $found" );
}

$np->nagios_exit( $np->check_messages() );
