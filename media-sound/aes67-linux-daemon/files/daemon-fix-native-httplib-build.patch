Patches required to use the native cpp-httplib shipped with Gentoo.
Upstream assumes a header-only library build, but Gentoo doesn't use that.
--- aes67-linux-daemon-1.6.4.orig/daemon/CMakeLists.txt
+++ aes67-linux-daemon-1.6.4/daemon/CMakeLists.txt
@@ -20,9 +20,7 @@ if (NOT RAVENNNA_ALSA_LKM_DIR)
 endif()
 
 # use sysroot cpp-http lib unless one was explicitly provided  in cmdline
-if (NOT CPP_HTTPLIB_DIR)
-    find_path( CPP_HTTPLIB_DIR "httplib.h" REQUIRED)
-endif()
+find_package(httplib REQUIRED)
 
 find_library(AVAHI_LIBRARY-COMMON NAMES avahi-common)
 find_library(AVAHI_LIBRARY-CLIENT NAMES avahi-client)
@@ -31,7 +29,7 @@ set(AVAHI_LIBRARIES ${AVAHI_LIBRARY-COMM
 set(AVAHI_INCLUDE_DIRS ${AVAHI_INCLUDE_DIR})
 
 find_package(Boost COMPONENTS system thread log program_options REQUIRED)
-include_directories(aes67-daemon ${RAVENNA_ALSA_LKM_DIR}/common ${RAVENNA_ALSA_LKM_DIR}/driver ${CPP_HTTPLIB_DIR} ${Boost_INCLUDE_DIR})
+include_directories(aes67-daemon ${RAVENNA_ALSA_LKM_DIR}/common ${RAVENNA_ALSA_LKM_DIR}/driver ${Boost_INCLUDE_DIR})
 add_definitions( -DBOOST_LOG_DYN_LINK -DBOOST_LOG_USE_NATIVE_SYSLOG )
 add_compile_options( -Wall )
 set(SOURCES error_code.cpp json.cpp main.cpp session_manager.cpp http_server.cpp config.cpp interface.cpp log.cpp sap.cpp browser.cpp rtsp_client.cpp mdns_client.cpp mdns_server.cpp rtsp_server.cpp utils.cpp)
@@ -49,7 +47,7 @@ if(ENABLE_TESTS)
     add_subdirectory(tests)
 endif()
 
-target_link_libraries(aes67-daemon ${Boost_LIBRARIES})
+target_link_libraries(aes67-daemon ${Boost_LIBRARIES} httplib::httplib)
 if(WITH_AVAHI)
   MESSAGE(STATUS "WITH_AVAHI")
   add_definitions(-D_USE_AVAHI_)
--- aes67-linux-daemon-1.6.4.orig/daemon/utils.hpp
+++ aes67-linux-daemon-1.6.4/daemon/utils.hpp
@@ -57,4 +57,39 @@ struct SDPOrigin {
 
 SDPOrigin sdp_get_origin(const std::string& sdp);
 
+// Copied from upstream cpp-httplib
+namespace httplib::detail {
+inline std::string encode_url(const std::string &s) {
+  std::string result;
+  result.reserve(s.size());
+
+  for (size_t i = 0; s[i]; i++) {
+    switch (s[i]) {
+    case ' ': result += "%20"; break;
+    case '+': result += "%2B"; break;
+    case '\r': result += "%0D"; break;
+    case '\n': result += "%0A"; break;
+    case '\'': result += "%27"; break;
+    case ',': result += "%2C"; break;
+    // case ':': result += "%3A"; break; // ok? probably...
+    case ';': result += "%3B"; break;
+    default:
+      auto c = static_cast<uint8_t>(s[i]);
+      if (c >= 0x80) {
+        result += '%';
+        char hex[4];
+        auto len = snprintf(hex, sizeof(hex) - 1, "%02X", c);
+        assert(len == 2);
+        result.append(hex, static_cast<size_t>(len));
+      } else {
+        result += s[i];
+      }
+      break;
+    }
+  }
+
+  return result;
+}
+} // namespace httplib::detail
+
 #endif
