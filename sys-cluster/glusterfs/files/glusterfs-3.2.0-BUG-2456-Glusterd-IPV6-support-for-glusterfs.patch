--- a/cli/src/cli-cmd-parser.c	2011-07-24 21:18:44.649626501 +0200
+++ b/cli/src/cli-cmd-parser.c	2011-07-24 21:33:13.996032334 +0200
@@ -46,11 +46,11 @@
         char                *space = " ";
         char            *delimiter = NULL;
         char            *host_name = NULL;
-        char                  *tmp = NULL;
         char        *free_list_ptr = NULL;
         char               *tmpptr = NULL;
         int                      j = 0;
         int         brick_list_len = 0;
+        char             *tmp_host = NULL;
 
         GF_ASSERT (words);
         GF_ASSERT (wordcount);
@@ -61,14 +61,13 @@
         strncpy (brick_list, space, strlen (space));
         brick_list_len++;
         while (brick_index < wordcount) {
-                delimiter = strchr (words[brick_index], ':');
-                if (!delimiter || delimiter == words[brick_index]
-                    || *(delimiter+1) != '/') {
+                if (validate_brick_name ((char *)words[brick_index])) {
                         cli_out ("wrong brick type: %s, use <HOSTNAME>:"
                                  "<export-dir-abs-path>", words[brick_index]);
                         ret = -1;
                         goto out;
                 } else {
+                        delimiter = strrchr (words[brick_index], ':');
                         cli_path_strip_trailing_slashes (delimiter + 1);
                 }
 
@@ -80,7 +79,13 @@
                         goto out;
                 }
 
-                host_name = gf_strdup (words[brick_index]);
+                tmp_host = gf_strdup ((char *)words[brick_index]);
+                if (!tmp_host) {
+                        gf_log ("cli", GF_LOG_ERROR, "Out of memory");
+                        ret = -1;
+                        goto out;
+                }
+                get_host_name (tmp_host, &host_name);
                 if (!host_name) {
                         ret = -1;
                         gf_log("cli",GF_LOG_ERROR, "Unable to allocate "
@@ -88,20 +93,19 @@
                         goto out;
                 }
 
-                strtok_r (host_name, ":", &tmp);
                 if (!(strcmp (host_name, "localhost") &&
                       strcmp (host_name, "127.0.0.1"))) {
                         cli_out ("Please provide a valid hostname/ip other "
                                  "than localhost or 127.0.0.1");
                         ret = -1;
-                        GF_FREE (host_name);
+                        GF_FREE (tmp_host);
                         goto out;
                 }
-                if (!valid_host_name(host_name, strlen(host_name))) {
+                if (!valid_internet_address (host_name)) {
                         cli_out ("internet address '%s' does not comform to "
 			         "standards", host_name);
                 }
-                GF_FREE (host_name);
+                GF_FREE (tmp_host);
                 tmp_list = gf_strdup (brick_list + 1);
                 if (free_list_ptr) {
                         GF_FREE (free_list_ptr);
@@ -688,7 +692,6 @@
         return ret;
 }
 
-
 int32_t
 cli_cmd_volume_remove_brick_parse (const char **words, int wordcount,
                                    dict_t **options)
@@ -757,14 +760,13 @@
         }
 
         while (brick_index < wordcount) {
-                delimiter = strchr(words[brick_index], ':');
-                if (!delimiter || delimiter == words[brick_index]
-                    || *(delimiter+1) != '/') {
+                if (validate_brick_name ((char *)words[brick_index])) {
                         cli_out ("wrong brick type: %s, use <HOSTNAME>:"
                                  "<export-dir-abs-path>", words[brick_index]);
                         ret = -1;
                         goto out;
                 } else {
+                        delimiter = strrchr(words[brick_index], ':');
                         cli_path_strip_trailing_slashes (delimiter + 1);
                 }
 
@@ -852,14 +854,13 @@
                 goto out;
         }
 
-        delimiter = strchr ((char *)words[3], ':');
-        if (!delimiter || delimiter == words[3]
-            || *(delimiter+1) != '/') {
+        if (validate_brick_name ((char *)words[3])) {
                 cli_out ("wrong brick type: %s, use "
                         "<HOSTNAME>:<export-dir-abs-path>", words[3]);
                 ret = -1;
                 goto out;
         } else {
+                delimiter = strrchr ((char *)words[3], ':');
                 cli_path_strip_trailing_slashes (delimiter + 1);
         }
         ret = dict_set_str (dict, "src-brick", (char *)words[3]);
@@ -872,14 +873,13 @@
                 goto out;
         }
 
-        delimiter = strchr ((char *)words[4], ':');
-        if (!delimiter || delimiter == words[4]
-            || *(delimiter+1) != '/') {
+        if (validate_brick_name ((char *)words[4])) {
                 cli_out ("wrong brick type: %s, use "
                         "<HOSTNAME>:<export-dir-abs-path>", words[4]);
                 ret = -1;
                 goto out;
         } else {
+                delimiter = strrchr ((char *)words[4], ':');
                 cli_path_strip_trailing_slashes (delimiter + 1);
         }
 
--- a/cli/src/cli.c	2011-07-24 21:18:44.649626501 +0200
+++ b/cli/src/cli.c	2011-07-24 21:20:23.388822433 +0200
@@ -517,7 +517,7 @@
         if (ret)
                 goto out;
 
-        ret = dict_set_str (options, "transport.address-family", "inet");
+        ret = dict_set_str (options, "transport.address-family", "inet/inet6");
         if (ret)
                 goto out;
 
--- a/libglusterfs/src/common-utils.c	2011-07-24 21:18:44.646293498 +0200
+++ b/libglusterfs/src/common-utils.c	2011-07-24 21:20:23.426283830 +0200
@@ -1804,3 +1804,42 @@
         return flag;
 }
 
+int
+validate_brick_name (char *brick)
+{
+        char *delimiter = NULL;
+        int  ret = 0;
+        delimiter = strrchr (brick, ':');
+        if (!delimiter || delimiter == brick
+            || *(delimiter+1) != '/') {
+                ret = -1;
+        }
+        return ret;
+}
+
+char *
+get_host_name (char *word, char **host)
+{
+        char *delimiter = NULL;
+        delimiter = strrchr (word, ':');
+        if (delimiter)
+                *delimiter = '\0';
+        else
+                return NULL;
+        *host = word;
+        return *host;
+}
+
+
+char *
+get_path_name (char *word, char **path)
+{
+        char *delimiter = NULL;
+        delimiter = strchr (word, '/');
+        if (!delimiter)
+                return NULL;
+        *path = delimiter;
+        return *path;
+}
+
+
--- a/libglusterfs/src/common-utils.h	2011-07-24 21:18:44.646293498 +0200
+++ b/libglusterfs/src/common-utils.h	2011-07-24 21:34:01.825370138 +0200
@@ -361,4 +361,7 @@
 void gf_array_insertionsort (void *a, int l, int r, size_t elem_size,
                              gf_cmp cmp);
 int gf_is_str_int (const char *value);
+int validate_brick_name (char *brick);
+char *get_host_name (char *word, char **host);
+char *get_path_name (char *word, char **path);
 #endif /* _COMMON_UTILS_H */
--- a/rpc/rpc-lib/src/rpc-transport.c	2011-07-24 21:18:44.572160822 +0200
+++ b/rpc/rpc-lib/src/rpc-transport.c	2011-07-24 21:20:23.492952894 +0200
@@ -999,7 +999,7 @@
                         port);
                 goto out;
         }
-        ret = dict_set_str (dict, "transport.address-family", "inet");
+        ret = dict_set_str (dict, "transport.address-family", "inet/inet6");
         if (ret) {
                 gf_log ("", GF_LOG_WARNING,
                         "failed to set addr-family with inet");
--- a/xlators/mgmt/glusterd/src/glusterd-utils.c	2011-07-24 21:18:44.606294387 +0200
+++ b/xlators/mgmt/glusterd/src/glusterd-utils.c	2011-07-24 21:20:23.502950504 +0200
@@ -126,6 +126,40 @@
         return is_local;
 }
 
+char *
+get_ip_from_addrinfo (struct addrinfo *addr, char **ip)
+{
+        char buf[64];
+        void *in_addr = NULL;
+        struct sockaddr_in *s4 = NULL;
+        struct sockaddr_in6 *s6 = NULL;
+
+        switch (addr->ai_family)
+        {
+                case AF_INET:
+                        s4 = (struct sockaddr_in *)addr->ai_addr;
+                        in_addr = &s4->sin_addr;
+                        break;
+
+                case AF_INET6:
+                        s6 = (struct sockaddr_in6 *)addr->ai_addr;
+                        in_addr = &s6->sin6_addr;
+                        break;
+
+                default:
+                        gf_log ("glusterd", GF_LOG_ERROR, "Invalid family");
+                        return NULL;
+        }
+
+        if (!inet_ntop(addr->ai_family, in_addr, buf, sizeof(buf))) {
+                gf_log ("glusterd", GF_LOG_ERROR, "String conversion failed");
+                return NULL;
+        }
+
+        *ip = strdup (buf);
+        return *ip;
+}
+
 int32_t
 glusterd_is_local_addr (char *hostname)
 {
@@ -133,13 +167,8 @@
         struct          addrinfo *result = NULL;
         struct          addrinfo *res = NULL;
         int32_t         found = 0;
-        struct          ifconf buf = {0,};
         int             sd = -1;
-        struct ifreq    *ifr = NULL;
-        struct ifreq    *ifr_end = NULL;
-        int32_t         size = 0;
-        char            buff[1024] = {0,};
-        gf_boolean_t    need_free = _gf_false;
+        char            *ip = NULL;
 
         ret = getaddrinfo (hostname, NULL, NULL, &result);
 
@@ -155,58 +184,26 @@
                         goto out;
         }
 
-
-        sd = socket (AF_INET, SOCK_DGRAM, 0);
-        if (sd == -1)
-                goto out;
-
-        buf.ifc_len = sizeof (buff);
-        buf.ifc_buf = buff;
-        size = buf.ifc_len;
-
-        ret = ioctl (sd, SIOCGIFCONF, &buf);
-        if (ret) {
-                goto out;
-        }
-
-        while (size <= buf.ifc_len) {
-                size += sizeof (struct ifreq);
-                buf.ifc_len = size;
-                if (need_free)
-                        GF_FREE (buf.ifc_req);
-                buf.ifc_req = GF_CALLOC (1, size, gf_gld_mt_ifreq);
-                need_free = 1;
-                ret = ioctl (sd, SIOCGIFCONF, &buf);
-                if (ret) {
-                        goto out;
-                }
-        }
-
-        ifr_end = (struct ifreq *)&buf.ifc_buf[buf.ifc_len];
-
         for (res = result; res != NULL; res = res->ai_next) {
-                ifr = buf.ifc_req;
-                while (ifr < ifr_end) {
-                        if ((ifr->ifr_addr.sa_family == res->ai_addr->sa_family)
-                            && (memcmp (&ifr->ifr_addr, res->ai_addr,
-                                        res->ai_addrlen) == 0)) {
-                                found = 1;
-                                goto out;
-                        }
-                        ifr++;
+                gf_log ("glusterd", GF_LOG_DEBUG, "%s ", get_ip_from_addrinfo (res, &ip));
+                sd = socket (res->ai_family, SOCK_DGRAM, 0);
+                if (sd == -1)
+                        goto out;
+                /*If bind succeeds then its a local address*/
+                ret = bind (sd, res->ai_addr, res->ai_addrlen);
+                if (ret == 0) {
+                        found = _gf_true;
+                        gf_log ("glusterd", GF_LOG_INFO, "%s is local", get_ip_from_addrinfo (res, &ip));
+                        close (sd);
+                        break;
                 }
+                close (sd);
         }
 
 out:
-        if (sd >= 0)
-                close (sd);
-
         if (result)
                 freeaddrinfo (result);
 
-        if (need_free)
-                GF_FREE (buf.ifc_req);
-
         if (found)
                 gf_log ("glusterd", GF_LOG_DEBUG, "%s is local", hostname);
         else
@@ -651,21 +648,18 @@
         glusterd_brickinfo_t    *new_brickinfo = NULL;
         char                    *hostname = NULL;
         char                    *path = NULL;
-        char                    *tmp = NULL;
-        char                    *tmpstr = NULL;
+        char                    *tmp_host = NULL;
+        char                    *tmp_path = NULL;
 
         GF_ASSERT (brick);
         GF_ASSERT (brickinfo);
 
-        tmp = gf_strdup (brick);
-        if (!tmp) {
-                gf_log ("glusterd", GF_LOG_ERROR,
-                        "Out of memory");
-                goto out;
-        }
-
-        hostname = strtok_r (tmp, ":", &tmpstr);
-        path = strtok_r (NULL, ":", &tmpstr);
+        tmp_host = gf_strdup (brick);
+        if (tmp_host)
+                get_host_name (tmp_host, &hostname);
+        tmp_path = gf_strdup (brick);
+        if (tmp_path)
+                get_path_name (tmp_path, &path);
 
         GF_ASSERT (hostname);
         GF_ASSERT (path);
@@ -682,8 +676,10 @@
 
         ret = 0;
 out:
-        if (tmp)
-                GF_FREE (tmp);
+        if (tmp_host)
+                GF_FREE (tmp_host);
+        if (tmp_host)
+                GF_FREE (tmp_path);
         gf_log ("", GF_LOG_DEBUG, "Returning %d", ret);
         return ret;
 }
@@ -767,26 +763,20 @@
         int32_t                 ret = -1;
         char                    *hostname = NULL;
         char                    *path = NULL;
-        char                    *dup_brick = NULL;
-        char                    *free_ptr = NULL;
+        char                    *tmp_host = NULL;
+        char                    *tmp_path = NULL;
 
         GF_ASSERT (brick);
         GF_ASSERT (volinfo);
 
         gf_log ("", GF_LOG_INFO, "brick: %s", brick);
 
-        dup_brick = gf_strdup (brick);
-        if (!dup_brick) {
-                gf_log ("", GF_LOG_ERROR,
-                        "Out of memory");
-                ret = -1;
-                goto out;
-        } else {
-                free_ptr = dup_brick;
-        }
-
-        hostname = strtok (dup_brick, ":");
-        path = strtok (NULL, ":");
+        tmp_host = gf_strdup (brick);
+        if (tmp_host)
+                get_host_name (tmp_host, &hostname);
+        tmp_path = gf_strdup (brick);
+        if (tmp_path)
+                get_path_name (tmp_path, &path);
 
         if (!hostname || !path) {
                 gf_log ("", GF_LOG_ERROR,
@@ -799,9 +789,10 @@
         ret = glusterd_volume_brickinfo_get (NULL, hostname, path, volinfo,
                                              brickinfo);
 out:
-        if (free_ptr)
-                GF_FREE (free_ptr);
-
+        if (tmp_host)
+                GF_FREE (tmp_host);
+        if (tmp_path)
+                GF_FREE (tmp_path);
         gf_log ("", GF_LOG_DEBUG, "Returning %d", ret);
         return ret;
 }
@@ -2260,21 +2251,29 @@
         GF_ASSERT (req->trans);
 
         char *name = NULL;
-        char *delimiter = NULL;
+        char *hostname = NULL;
+        char *tmp_host = NULL;
+        int  ret = 0;
 
         name = req->trans->peerinfo.identifier;
-        strncpy (remote_host, name, len);
-        delimiter = strchr (remote_host, ':');
+        tmp_host = gf_strdup (name);
+        if (tmp_host)
+                get_host_name (tmp_host, &hostname);
 
-        GF_ASSERT (delimiter);
-        if (!delimiter) {
+        GF_ASSERT (hostname);
+        if (!hostname) {
                 memset (remote_host, 0, len);
-                return -1;
+                ret = -1;
+                goto out;
         }
 
-        *delimiter = '\0';
+        strncpy (remote_host, hostname, strlen (hostname));
 
-        return 0;
+
+out:
+        if (tmp_host)
+                GF_FREE (tmp_host);
+        return ret;
 }
 
 int
--- a/xlators/mount/fuse/utils/mount.glusterfs.in	2011-07-24 21:18:44.599627892 +0200
+++ b/xlators/mount/fuse/utils/mount.glusterfs.in	2011-07-24 21:20:23.542950381 +0200
@@ -189,7 +189,7 @@
     volfile_loc="$1";
 
     [ -r "$volfile_loc" ] || {
-	server_ip=$(echo "$volfile_loc" | sed -n 's/\([^\:]*\).*/\1/p');
+        server_ip=$(echo "$volfile_loc" | sed -n 's/\([a-zA-Z0-9:.\-]*\):.*/\1/p');
         test_str=$(echo "$volfile_loc" | sed -n 's/.*:\([^ ]*\).*/\1/p');
         [ -n "$test_str" ] && {
             volume_id="$test_str";
--- a/xlators/mount/fuse/utils/mount_glusterfs.in	2011-07-24 21:18:44.599627892 +0200
+++ b/xlators/mount/fuse/utils/mount_glusterfs.in	2011-07-24 21:20:23.565491768 +0200
@@ -172,7 +172,7 @@
     done
     
     [ -r "$volfile_loc" ] || {
-	server_ip=$(echo "$volfile_loc" | sed -n 's/\([^\:]*\).*/\1/p');
+        server_ip=$(echo "$volfile_loc" | sed -n 's/\([a-zA-Z0-9:.\-]*\):.*/\1/p');
 	volfile_loc="";
     }
     # following line is product of love towards sed
