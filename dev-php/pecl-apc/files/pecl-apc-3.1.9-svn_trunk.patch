diff -u tags/APC_3_1_9/apc_bin.c trunk/apc_bin.c
--- tags/APC_3_1_9/apc_bin.c	2012-03-06 19:42:30.210739840 +0100
+++ trunk/apc_bin.c	2012-03-06 19:41:45.413732729 +0100
@@ -28,6 +28,7 @@
 #include "apc_globals.h"
 #include "apc_bin.h"
 #include "apc_zend.h"
+#include "apc_php.h"
 #include "apc_sma.h"
 #include "apc_pool.h"
 #include "ext/standard/md5.h"
@@ -446,7 +447,7 @@
         zend_hash_index_update(&APCG(copied_zvals), (ulong)zv, (void**)&zv, sizeof(zval*), NULL);
     }
 
-    switch(zv->type & ~IS_CONSTANT_INDEX) {
+    switch(zv->type & IS_CONSTANT_TYPE_MASK) {
         case IS_NULL:
         case IS_LONG:
         case IS_DOUBLE:
diff -u tags/APC_3_1_9/apc_cache.c trunk/apc_cache.c
--- tags/APC_3_1_9/apc_cache.c	2012-03-06 19:42:30.256739032 +0100
+++ trunk/apc_cache.c	2012-03-06 19:41:45.462731758 +0100
@@ -314,7 +314,7 @@
 void apc_cache_destroy(apc_cache_t* cache TSRMLS_DC)
 {
     DESTROY_LOCK(cache->header->lock);
-#ifdef NONBLOCKING_LOCK_AVAILABLE
+#if NONBLOCKING_LOCK_AVAILABLE
     DESTROY_LOCK(cache->header->wrlock);
 #endif
     apc_efree(cache TSRMLS_CC);
@@ -1290,7 +1290,9 @@
                 add_next_index_zval(list, link);
                 j++;
             }
-            add_next_index_long(slots, j);
+            if(j != 0) {
+                add_index_long(slots, (ulong)i, j);
+            }
         }
 
         /* For each slot pending deletion */
diff -u tags/APC_3_1_9/apc_compile.c trunk/apc_compile.c
--- tags/APC_3_1_9/apc_compile.c	2012-03-06 19:42:30.146738816 +0100
+++ trunk/apc_compile.c	2012-03-06 19:41:45.365732726 +0100
@@ -28,19 +28,16 @@
 
  */
 
-/* $Id: apc_compile.c 307314 2011-01-10 00:06:29Z pajoye $ */
+/* $Id: apc_compile.c 323587 2012-02-27 15:21:12Z gopalv $ */
 
 #include "apc_compile.h"
 #include "apc_globals.h"
 #include "apc_zend.h"
+#include "apc_php.h"
 #include "apc_string.h"
 #include "ext/standard/php_var.h"
 #include "ext/standard/php_smart_str.h"
 
-#ifndef IS_CONSTANT_TYPE_MASK
-#define IS_CONSTANT_TYPE_MASK (~IS_CONSTANT_INDEX)
-#endif
-
 typedef void* (*ht_copy_fun_t)(void*, void*, apc_context_t* TSRMLS_DC);
 //typedef void  (*ht_free_fun_t)(void*, apc_context_t*);
 typedef int (*ht_check_copy_fun_t)(Bucket*, va_list);
@@ -60,7 +57,9 @@
  */
 static zval** my_copy_zval_ptr(zval**, const zval**, apc_context_t* TSRMLS_DC);
 static zval* my_copy_zval(zval*, const zval*, apc_context_t* TSRMLS_DC);
+#ifndef ZEND_ENGINE_2_4
 static znode* my_copy_znode(znode*, znode*, apc_context_t* TSRMLS_DC);
+#endif
 static zend_op* my_copy_zend_op(zend_op*, zend_op*, apc_context_t* TSRMLS_DC);
 static zend_function* my_copy_function(zend_function*, zend_function*, apc_context_t* TSRMLS_DC);
 static zend_function_entry* my_copy_function_entry(zend_function_entry*, const zend_function_entry*, apc_context_t* TSRMLS_DC);
@@ -93,9 +92,11 @@
  * defined/overridden in the 'current' class and not inherited.
  */
 static int my_check_copy_function(Bucket* src, va_list args);
-static int my_check_copy_default_property(Bucket* p, va_list args);
 static int my_check_copy_property_info(Bucket* src, va_list args);
+#ifndef ZEND_ENGINE_2_4
+static int my_check_copy_default_property(Bucket* p, va_list args);
 static int my_check_copy_static_member(Bucket* src, va_list args);
+#endif
 static int my_check_copy_constant(Bucket* src, va_list args);
 
 /* }}} */
@@ -279,7 +280,7 @@
 {	
 #ifdef ZEND_ENGINE_2_4
     if (pool->type != APC_UNPOOL) {
-        char * ret = apc_new_interned_string(str, len TSRMLS_CC);
+        char * ret = (char*)apc_new_interned_string((const char*)str, len TSRMLS_CC);
         if (ret) {
             return ret;
         }
@@ -947,6 +948,8 @@
 
     dst->pListTail = newp;
 
+    zend_hash_internal_pointer_reset(dst);
+
     return dst;
 }
 /* }}} */
@@ -1016,6 +1019,9 @@
             case ZEND_JMP_SET:
 #endif
 #ifdef ZEND_ENGINE_2_4
+            case ZEND_JMP_SET_VAR:
+#endif
+#ifdef ZEND_ENGINE_2_4
                 zo->op2.jmp_addr = dst->opcodes + (zo->op2.jmp_addr - src->opcodes);
 #else
                 zo->op2.u.jmp_addr = dst->opcodes + (zo->op2.u.jmp_addr - src->opcodes);
@@ -1125,6 +1131,9 @@
 #ifdef ZEND_ENGINE_2_3
             case ZEND_JMP_SET:
 #endif
+#ifdef ZEND_ENGINE_2_4
+            case ZEND_JMP_SET_VAR:
+#endif
                 if(flags != NULL) {
                     flags->has_jumps = 1;
                 }
@@ -1582,6 +1591,9 @@
                 case ZEND_JMP_SET:
 #endif
 #ifdef ZEND_ENGINE_2_4
+                case ZEND_JMP_SET_VAR:
+#endif
+#ifdef ZEND_ENGINE_2_4
                     dzo->op2.jmp_addr = dst->opcodes +
                                             (zo->op2.jmp_addr - src->opcodes);
 #else
@@ -1694,6 +1706,7 @@
     /* Deep-copy the class properties, because they will be modified */
 
 #ifdef ZEND_ENGINE_2_4
+    dst->name = apc_string_pmemcpy((char*)src->name, src->name_length+1, ctxt->pool TSRMLS_CC); 
 	dst->default_properties_count = src->default_properties_count;
     if (src->default_properties_count) {
         dst->default_properties_table = (zval**) apc_php_malloc((sizeof(zval*) * src->default_properties_count) TSRMLS_CC);
diff -u tags/APC_3_1_9/apc_iterator.c trunk/apc_iterator.c
--- tags/APC_3_1_9/apc_iterator.c	2012-03-06 19:42:30.152739440 +0100
+++ trunk/apc_iterator.c	2012-03-06 19:41:45.367732265 +0100
@@ -217,6 +217,9 @@
     iterator->obj.ce = ce;
     ALLOC_HASHTABLE(iterator->obj.properties);
     zend_hash_init(iterator->obj.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
+#ifdef ZEND_ENGINE_2_4
+    iterator->obj.properties_table = NULL;
+#endif
     iterator->obj.guards = NULL;
     iterator->initialized = 0;
     retval.handle = zend_objects_store_put(iterator, apc_iterator_destroy, apc_iterator_free, NULL TSRMLS_CC);
diff -u tags/APC_3_1_9/apc_lock.h trunk/apc_lock.h
--- tags/APC_3_1_9/apc_lock.h	2012-03-06 19:42:30.320028351 +0100
+++ trunk/apc_lock.h	2012-03-06 19:41:45.540731897 +0100
@@ -154,7 +154,7 @@
 # define apc_lck_nb_lock(a)    apc_fcntl_nonblocking_lock(a TSRMLS_CC)
 # define apc_lck_rdlock(a)     apc_fcntl_rdlock(a TSRMLS_CC)
 # define apc_lck_unlock(a)     apc_fcntl_unlock(a TSRMLS_CC)
-# define apc_lck_rdunlock(a)   apc_fcntl_unlock(&a TSRMLS_CC)
+# define apc_lck_rdunlock(a)   apc_fcntl_unlock(a TSRMLS_CC)
 #endif
 
 #endif
diff -u tags/APC_3_1_9/apc_main.c trunk/apc_main.c
--- tags/APC_3_1_9/apc_main.c	2012-03-06 19:42:30.140736310 +0100
+++ trunk/apc_main.c	2012-03-06 19:41:45.363732485 +0100
@@ -887,14 +887,14 @@
         apc_cache_release(apc_cache, cache_entry TSRMLS_CC);
     }
 
-    apc_cache_destroy(apc_cache TSRMLS_CC);
-    apc_cache_destroy(apc_user_cache TSRMLS_CC);
-    apc_sma_cleanup(TSRMLS_C);
-
 #ifdef ZEND_ENGINE_2_4
     apc_interned_strings_shutdown(TSRMLS_C);
 #endif
 
+    apc_cache_destroy(apc_cache TSRMLS_CC);
+    apc_cache_destroy(apc_user_cache TSRMLS_CC);
+    apc_sma_cleanup(TSRMLS_C);
+
     APCG(initialized) = 0;
     return 0;
 }
diff -u tags/APC_3_1_9/apc_php.h trunk/apc_php.h
--- tags/APC_3_1_9/apc_php.h	2012-03-06 19:42:30.248210933 +0100
+++ trunk/apc_php.h	2012-03-06 19:41:45.460732502 +0100
@@ -63,6 +63,10 @@
 #include "zend_vm.h"
 #endif
 
+#ifndef IS_CONSTANT_TYPE_MASK
+#define IS_CONSTANT_TYPE_MASK (~IS_CONSTANT_INDEX)
+#endif
+
 #include "rfc1867.h"
 
 #endif
diff -u tags/APC_3_1_9/apc_string.c trunk/apc_string.c
--- tags/APC_3_1_9/apc_string.c	2012-03-06 19:42:30.209737194 +0100
+++ trunk/apc_string.c	2012-03-06 19:41:45.412732014 +0100
@@ -65,7 +65,7 @@
 {
 }
 
-char *apc_new_interned_string(char *arKey, int nKeyLength TSRMLS_DC)
+const char *apc_new_interned_string(const char *arKey, int nKeyLength TSRMLS_DC)
 {
     ulong h;
     uint nIndex;
@@ -146,6 +146,10 @@
             p->arKey = apc_new_interned_string(p->arKey, p->nKeyLength TSRMLS_CC);
         }
 
+		if (ce->name) {
+			ce->name = apc_new_interned_string(ce->name, ce->name_length+1 TSRMLS_CC);
+		}
+
         q = ce->properties_info.pListHead;
         while (q) {
             zend_property_info *info = (zend_property_info*)(q->pData);
@@ -194,6 +198,7 @@
     int count = APCG(shm_strings_buffer) / (sizeof(Bucket) + sizeof(Bucket*) * 2);
 
     apc_interned_strings_data = (apc_interned_strings_data_t*) apc_sma_malloc(APCG(shm_strings_buffer) TSRMLS_CC);
+    memset((void *)apc_interned_strings_data, 0, APCG(shm_strings_buffer));
 
     CREATE_LOCK(APCSG(lock));
 
diff -u tags/APC_3_1_9/apc_string.h trunk/apc_string.h
--- tags/APC_3_1_9/apc_string.h	2012-03-06 19:42:30.211737451 +0100
+++ trunk/apc_string.h	2012-03-06 19:41:45.414732176 +0100
@@ -35,7 +35,7 @@
 void apc_interned_strings_init(TSRMLS_D);
 void apc_interned_strings_shutdown(TSRMLS_D);
 
-char *apc_new_interned_string(char *arKey, int nKeyLength TSRMLS_DC);
+const char *apc_new_interned_string(const char *arKey, int nKeyLength TSRMLS_DC);
 
 #endif
 
diff -u tags/APC_3_1_9/apc_windows_srwlock_kernel.c trunk/apc_windows_srwlock_kernel.c
--- tags/APC_3_1_9/apc_windows_srwlock_kernel.c	2012-03-06 19:42:30.206740540 +0100
+++ trunk/apc_windows_srwlock_kernel.c	2012-03-06 19:41:45.389732343 +0100
@@ -81,7 +81,15 @@
 
 void apc_windows_cs_destroy(apc_windows_cs_rwlock_t *lock)
 {
-    pRtlDeleteResource(lock);
+    __try
+    {
+        pRtlDeleteResource(lock);
+    }
+        __except(GetExceptionCode() == EXCEPTION_ACCESS_VIOLATION ?
+               EXCEPTION_EXECUTE_HANDLER : EXCEPTION_CONTINUE_SEARCH)
+    {
+        /* Ignore exception (resource was freed during shutdown of another thread) */
+    }
     FreeLibrary(ntdll);
     return;
 }
diff -u tags/APC_3_1_9/config.m4 trunk/config.m4
--- tags/APC_3_1_9/config.m4	2012-03-06 19:42:30.300778118 +0100
+++ trunk/config.m4	2012-03-06 19:41:45.537741961 +0100
@@ -1,5 +1,5 @@
 dnl
-dnl $Id: config.m4 307438 2011-01-13 14:20:21Z gopalv $
+dnl $Id: config.m4 313810 2011-07-28 06:45:03Z rasmus $
 dnl
 
 PHP_ARG_ENABLE(apc, whether to enable APC support,
@@ -177,7 +177,7 @@
 	LIBS="$orig_LIBS"
 fi
 
-	AC_CACHE_CHECK([whether the target compiler supports builtin atomics], PHP_APC_GCC_ATOMICS, [
+	AC_CACHE_CHECK([whether the target compiler supports builtin atomics], PHP_cv_APC_GCC_ATOMICS, [
 
 			AC_TRY_LINK([],[
 					int foo = 0;
@@ -185,11 +185,11 @@
 					__sync_bool_compare_and_swap(&foo, 0, 1);
 					return __sync_fetch_and_add(&foo, 1);
 				],
-				[PHP_APC_GCC_ATOMICS=yes],
-				[PHP_APC_GCC_ATOMICS=no])
+				[PHP_cv_APC_GCC_ATOMICS=yes],
+				[PHP_cv_APC_GCC_ATOMICS=no])
 		])
 
-	if test "x${PHP_APC_GCC_ATOMICS}" != "xno"; then
+	if test "x${PHP_cv_APC_GCC_ATOMICS}" != "xno"; then
 			AC_DEFINE(HAVE_ATOMIC_OPERATIONS, 1,
 				[Define this if your target compiler supports builtin atomics])
 		else
